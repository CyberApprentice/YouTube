ADS script: 1/29/19 - 

Article: https://cyberapprenticeblog.wordpress.com/2018/12/23/alternate-data-streams-ads/
YouTube: 
Other Links: https://itsmyurls.com/cyberapprentice?ref=widget

CyberApprentice here! Let's talk about alternative data streams, ADS for short. I assume it's known as a common hiding technique, but in reality, it's not a strong one at all. It's unseen to the eye but revealed by tools. For more indepth discussion and details, please see my article in the description below.

Before we can uncover these streams, let's talk a little about what they are. They're an NTFS only feature that appends another $DATA attribute to an already existing file with content. Let's start with seeing what this looks like. 

For our example, I'm using a USB that I wiped with 0s. This isn't necessary but I wanted to clear the drive of any distracting data. I reformatted it to NTFS. placed two text files, "File1", and "File2". "File1" has the content seen here, just a short line stating "Learning Forensics is cool!" While File2 has multiple lines of the same phrase. I did this to depict that there's only a certain amount of space available for the $DATA attribute and once it's passed the limit, data runs are stored instead. And data runs are just cluster locations to find where the data resides. We'll see that coming up.

First, We'll need a hex editor. They're plenty out there like WinHex, UltraEdit, HxD, 010, and plenty more. Find one that fits your preferences. Now that we've downloaded our hex editor, let's use it! In my case, I'm using WinHex, so this video will be tailored towards it. We open it up, and load the device by clicking enter, selecting the USB and we're ready to view it! If you're in editing mode, just disable by going through Options > Edit Mode > Read-only mode so you don't accidentally overwrite any bytes. You see this top pain here? Looks very familiar doesn't it? We're going to cheat and use this method. Some hex editors only provide the hex and ASCII panes and you would have to navigate through the bytes alone, and explaining that process is out of scope for this discussion when we can simply click through it. 

Let's start with the File1 text file. Once you find and click it, you're automatically sent to the data's location which in this case is an MFT entry. What we're looking for is the $DATA attribute which is highlighted here. And we know this is true because $DATA attributes are distinguished by the hex value 0x80 as we see here at the beginning. As we look over to the ASCII translation, we see the text in clear. This isn't always as clear as day in files that have a certain format like Microsoft Word, or if it's encrypted, this will be just unreadable characters.


To switch over to File2, we scroll down to the next MFT entry. And we know we're in the right place because as you see in the ASCII table, we see "File2.txt" and went from MFT entry 39 to 40. Looking through the MFT record, we see the same attributes, but don't see the data in clear text. This is what I mentioned before when it comes to exceeding that space. MFT records are 1024 bytes in size. The attributes can be any size within the MFT. And specifically, the limit for the $DATA attribute's content is anything over 700 bytes, it'll be placed in an external cluster. That's what the data runs lead to. And as we click File2, we're taken to that location to find its contents.

To create an ADS, it's as simple as the following, open up cmd, find a file you want to use or create one, in our case, we'll use file1.txt. Then go to its directory, "cd Desktop" for us. Let's set a baseline by viewing it using the command "type file1.txt". Nothing out of the ordinary there. Let's create the ADS by using the command "echo coordinates to treasure > (stdout symbol) file1.txt:ads.txt". Completed with no errors. Let's view it again using "type file1.txt". Same as before.. To see the ADS, we reference with the colon like so, "notepad file1.txt:ads.txt". We use notepad because the "type" command doesn't understand colons, but notepad does! And we see it! Of course you won't be doing this from a forensics perspective so let's use our tool like we normally would.

I'm going to drag this file into my USB. And then load it back into WinHex. If you only load the file itself, you'll only see the primary $DATA attribute's content. After refreshing WinHex to update the changes and going back to File1, we look over at the ASCII table and see another $DATA attrbiute indicating by the hex value 80, we see the name of the file we attached, ads.txt, and its content. The same principles I mentioned before about the content's size apply here as well. I also created a long ADS and attached it to our second file just to show this. We scroll down to find that we have another data run pointing to the cluster location.

Now we'll discuss finding ADS. There are plenty of tools that can automate this process, but if you're worried about your system or just curius, open up PowerShell as admin, go to your highest parent directory using "cd C:\", and use this line of code (Get-ChildItem -Recurse | Get-Item -Stream * | Where-Object Stream -notin ':$Data','Zone.Identifier') that'll scan your subdirectories from your current directory, and to scan the whole system, we go to our highest. You'll see some access denied or non-existent path errors which is perfectly fine. Hopefully you won't see anything else besides the ones we created together!

That's all for this video, thanks for watching and best of luck moving forward!
